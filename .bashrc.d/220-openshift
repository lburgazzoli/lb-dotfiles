
export OCP4_HOME=${LB_SFW_TOOLS_HOME}/ocp4
export OCM_HOME=${LB_SFW_TOOLS_HOME}/ocm

#############
#
#############

function get-ocp4 {
    if [ $# -eq 1 ]; then
        BINARY_PATH="${OCP4_HOME}/${1}"

        if [ ! -d ${BINARY_PATH} ]; then
            mkdir -p ${BINARY_PATH}
        else
            rm -rv ${BINARY_PATH}/*
        fi

        curl \
            --location \
            https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${1}/openshift-client-linux-${1}.tar.gz \
            | tar xvzf - \
                --directory ${BINARY_PATH}
        curl \
            --location \
            https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${1}/openshift-install-linux-${1}.tar.gz \
            | tar xvzf - \
                --directory ${BINARY_PATH}
    fi
}

function get-ocm {
    openshift-online/ocm-cli

    REPO_OWNER="openshift-online"
    REPO_NAME="ocm-cli"
    BINARY_NAME="ocm-linux-amd64"
    BINARY_PATH="${OCM_HOME}"

    if [ $# -eq 1 ]; then
        URL= "https://github.com/${REPO_OWNER}/${REPO_NAME}/releases/download/v${1}/${BINARY_NAME}-${1}.${BINARY_TYPE}"
    else
        URL=$(curl -s https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases/latest \
            | jq --raw-output \
                ".assets[] | select(.name == \"${BINARY_NAME}\") | .browser_download_url")
    fi

    if [ ! -d ${BINARY_PATH} ]; then
        mkdir -p ${BINARY_PATH}
    else
        rm -rv ${BINARY_PATH}/*
    fi

    echo "Downloading from: $URL"

    curl --location --silent $URL --output ${BINARY_PATH}/ocm
    cmod u+x ${BINARY_PATH}/ocm

    pathadd $BINARY_PATH
}


#############
#
#############

if [ -d ${OCP4_HOME}/4 ]; then
    pathadd ${OCP4_HOME}/4
fi
if [ -d ${OCM_HOME} ]; then
    pathadd ${OCM_HOME}
fi

if hash oc 2>/dev/null; then
    source <(oc completion bash)
fi
if hash ocm 2>/dev/null; then
    source <(ocm completion)
fi
