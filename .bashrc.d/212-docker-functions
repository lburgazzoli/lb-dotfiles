
################################################################################
# Common functions
################################################################################

function docker-rm-stopped {
    local name=$1
    local state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

    if [[ "$state" == "false" ]]; then
        docker rm "$name"
    fi
}

function docker-require {
    for container in "$@"; do
        local state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

        if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
            echo "$container is not running, starting it for you."
            $container
        fi
    done
}

function docker-setup-x11 {
    XSOCK=/tmp/.X11-unix
    XAUTH=/tmp/.docker.xauth

    if [ ! -f /tmp/.docker.xauth ]; then
        touch /tmp/.docker.xauth
        xauth nlist $DISPLAY | sed -e 's/^..../ffff/' | xauth -f /tmp/.docker.xauth nmerge -
    fi
}

function docker-ipof {
    for CONTAINER in "$@"
    do
        local STATE=$(docker inspect --format "{{.State.Running}}" "$CONTAINER" 2>/dev/null)

        if [[ "$STATE" == "true" ]]; then
            local IP=$(docker inspect --format "{{.NetworkSettings.IPAddress}}" "$CONTAINER")
            echo "$CONTAINER: $IP"
        fi
    done
}

function docker-prune {
    docker rm $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
    docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

################################################################################
#
################################################################################

function gitsome {
    local DOCKER_IMAGE="lburgazzoli/app-gitsome"
    local DOCKER_NAME="gitsome"
    local DOCKER_OPTS="--detach"
    local DOCKER_USER=${LOGNAME}

    docker run \
        -ti \
        --rm \
        --volume /etc/localtime:/etc/localtime:ro \
        --volume ${HOME}/.ssh/config:/home/${DOCKER_USER}/.ssh/config:ro \
        --volume ${HOME}/.gnupg:/home/${DOCKER_USER}/.gnupg:ro \
        --volume ${HOME}/.gitconfig:/home/${DOCKER_USER}/.gitconfig:ro \
        --volume ${HOME}/.gitsomeconfig:/home/${DOCKER_USER}/.gitsomeconfig:Z \
        --volume ${HOME}/.gitsomeconfigurl:/home/${DOCKER_USER}/.gitsomeconfigurl:Z \
        --volume ${HOME}/work:/home/${DOCKER_USER}/work \
        --workdir ${PWD} \
        ${DOCKER_IMAGE}
}

function gitbc {
    local DOCKER_IMAGE="lburgazzoli/app-gitbc"
    local DOCKER_NAME="gitbc"
    local DOCKER_OPTS="--detach"
    local DOCKER_USER=${LOGNAME}

    docker run \
        -ti \
        --rm \
        --volume /etc/localtime:/etc/localtime:ro \
        --volume ${HOME}/.ssh/config:/home/${DOCKER_USER}/.ssh/config:ro \
        --volume ${HOME}/.gnupg:/home/${DOCKER_USER}/.gnupg:ro \
        --volume ${HOME}/.gitconfig:/home/${DOCKER_USER}/.gitconfig:ro \
        --volume ${HOME}/work:/home/${DOCKER_USER}/work \
        --workdir ${PWD} \
        ${DOCKER_IMAGE}
}

function gitcz {
    local DOCKER_IMAGE="lburgazzoli/app-cz-cli"
    local DOCKER_NAME="gitcz"
    local DOCKER_OPTS="--detach"
    local DOCKER_USER=${LOGNAME}

    docker run \
        -ti \
        --rm \
        --volume /etc/localtime:/etc/localtime:ro \
        --volume ${HOME}/.ssh/config:/home/${DOCKER_USER}/.ssh/config:ro \
        --volume ${HOME}/.gnupg:/home/${DOCKER_USER}/.gnupg:Z \
        --volume ${HOME}/.gnupg/gpg-docker.conf:/home/${DOCKER_USER}/.gnupg/gpg.conf:ro \
        --volume ${HOME}/.gitconfig:/home/${DOCKER_USER}/.gitconfig:ro \
        --volume ${HOME}/work:/home/${DOCKER_USER}/work \
        --workdir ${PWD} \
        ${DOCKER_IMAGE} \
        /usr/local/lib/node_modules/commitizen/bin/git-cz
}

function commitizen {
    local DOCKER_IMAGE="lburgazzoli/app-cz-cli"
    local DOCKER_NAME="commitizen"
    local DOCKER_USER=${LOGNAME}

    docker run \
        -ti \
        --rm \
        --volume /etc/localtime:/etc/localtime:ro \
        --volume ${HOME}/.ssh/config:/home/${DOCKER_USER}/.ssh/config:ro \
        --volume ${HOME}/.gnupg:/home/${DOCKER_USER}/.gnupg:Z \
        --volume ${HOME}/.gnupg/gpg-docker.conf:/home/${DOCKER_USER}/.gnupg/gpg.conf:ro \
        --volume ${HOME}/.gitconfig:/home/${DOCKER_USER}/.gitconfig:ro \
        --volume ${HOME}/work:/home/${DOCKER_USER}/work \
        --workdir ${PWD} \
        ${DOCKER_IMAGE} \
        /usr/local/lib/node_modules/commitizen/bin/commitizen
}

function squid {
    local DOCKER_IMAGE="lburgazzoli/app-squid"
    local DOCKER_NAME="squid"
    local DOCKER_USER=${LOGNAME}
    local DOCKER_VOLS

    if [ -f ${PWD}/squid.conf ]; then
        DOCKER_VOLS="${DOCKER_VOLS} --volume ${PWD}/squid.conf:/etc/squid/squid.conf"
    fi

    if [ -f ${PWD}/squid-passwd ]; then
        DOCKER_VOLS="${DOCKER_VOLS} --volume ${PWD}/squid-passwd:/etc/squid/squid-passwd"
    fi

    echo $DOCKER_VOLS

    docker run \
        -ti \
        --rm \
        --publish 3128:3128 \
        ${DOCKER_VOLS} \
        ${DOCKER_IMAGE} \
            /usr/sbin/squid -N -d 0
}

function tor-proxy {
    local DOCKER_IMAGE="lburgazzoli/app-tor-proxy"
    local DOCKER_NAME="tor-proxy"

    docker network ls | grep tor 2>&1 > /dev/null
    if [ $? -ne 0 ]; then
        docker network create tor
    fi

    docker run \
        --rm \
        --detach \
        --network tor \
        --name $DOCKER_NAME \
        ${DOCKER_IMAGE}
}

function tor-privoxy {
    docker-require tor-proxy

    local DOCKER_IMAGE="lburgazzoli/app-privoxy"
    local DOCKER_NAME="tor-privoxy"

    docker run \
        --rm \
        --detach \
        --network tor \
        --name $DOCKER_NAME \
        --volume /etc/localtime:/etc/localtime:ro \
        ${DOCKER_IMAGE}
}

################################################################################
# Development
################################################################################

function ctop {
    local DOCKER_IMAGE="quay.io/vektorlab/ctop:latest"
    local DOCKER_NAME="ctop"

    docker run \
        --rm \
        --tty=true \
        --interactive=true \
        --name $DOCKER_NAME \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        ${DOCKER_IMAGE}
}

function activemq {
    local DOCKER_IMAGE="lburgazzoli/app-activemq:5.14.3"
    local DOCKER_NAME="activemq"
    local DOCKER_OPTS="--detach"

    if [ "$#" -eq 1 ]; then
        if [[ "$1" == "-f" ]]; then
            local state=$(docker inspect --format "{{.State.Running}}" "${DOCKER_NAME}" 2>/dev/null)
            if [[ "$state" == "true" ]]; then
                docker logs -f ${DOCKER_NAME}
                exit
            else
                DOCKER_OPTS=""
            fi
        elif [[ "$1" == "stop" ]]; then
            docker stop ${DOCKER_NAME}
        fi
    fi

    docker run \
        ${DOCKER_OPTS} \
        --rm \
        --name $DOCKER_NAME \
        --publish 61616:61616 \
        --publish 1883:1883 \
        ${DOCKER_IMAGE}
}

function zookeeper34 {
    local DOCKER_IMAGE="zookeeper:3.4"
    local DOCKER_NAME="zookeeper"
    local DOCKER_OPTS="--detach"

    if [ "$#" -eq 1 ]; then
        if [[ "$1" == "-f" ]]; then
            local state=$(docker inspect --format "{{.State.Running}}" "${DOCKER_NAME}" 2>/dev/null)
            if [[ "$state" == "true" ]]; then
                docker logs -f ${DOCKER_NAME}
                exit
            else
                DOCKER_OPTS=""
            fi
        elif [[ "$1" == "stop" ]]; then
            docker stop ${DOCKER_NAME}
        fi
    fi

    docker run \
        ${DOCKER_OPTS} \
        --rm \
        --name $DOCKER_NAME \
        --publish 2181:2181 \
        --publish 2888:2888 \
        --publish 3888:3888 \
        ${DOCKER_IMAGE}
}

function zookeeper35 {
    local DOCKER_IMAGE="zookeeper:3.5"
    local DOCKER_NAME="zookeeper"
    local DOCKER_OPTS="--detach"

    if [ "$#" -eq 1 ]; then
        if [[ "$1" == "-f" ]]; then
            local state=$(docker inspect --format "{{.State.Running}}" "${DOCKER_NAME}" 2>/dev/null)
            if [[ "$state" == "true" ]]; then
                docker logs -f ${DOCKER_NAME}
                exit
            else
                DOCKER_OPTS=""
            fi
        elif [[ "$1" == "stop" ]]; then
            docker stop ${DOCKER_NAME}
        fi
    fi

    docker run \
        ${DOCKER_OPTS} \
        --rm \
        --name $DOCKER_NAME \
        --publish 2181:2181 \
        --publish 2888:2888 \
        --publish 3888:3888 \
        ${DOCKER_IMAGE}
}

function consul {
    local DOCKER_IMAGE="consul:${CONSUL_VERSION}"
    local DOCKER_NAME="consul"
    local DOCKER_OPTS="--detach"

    if [ "$#" -eq 1 ]; then
        if [[ "$1" == "-f" ]]; then
            local state=$(docker inspect --format "{{.State.Running}}" "${DOCKER_NAME}" 2>/dev/null)
            if [[ "$state" == "true" ]]; then
                docker logs -f ${DOCKER_NAME}
                exit
            else
                DOCKER_OPTS=""
            fi
        elif [[ "$1" == "stop" ]]; then
            docker stop ${DOCKER_NAME}
        fi
    fi

    docker run \
        ${DOCKER_OPTS} \
        --rm \
        --name $DOCKER_NAME \
        --env GOMAXPROCS=2 \
        --env CONSUL_UI_BETA=true \
        --publish 8500:8500 \
        $DOCKER_IMAGE \
            agent \
                -dev \
                -server \
                -ui \
                -bootstrap \
                -datacenter neverland \
                -client 0.0.0.0 \
                -log-level trace
}

################################################################################
# Development - Etcd
################################################################################

function etcdv2 {
    local DOCKER_IMAGE="quay.io/coreos/etcd:${ETCD2_VERSION}"
    local DOCKER_NAME="etcdv2"
    local DOCKER_OPTS="--detach"

    if [ "$#" -eq 1 ]; then
        if [[ "$1" == "-f" ]]; then
            local state=$(docker inspect --format "{{.State.Running}}" "${DOCKER_NAME}" 2>/dev/null)
            if [[ "$state" == "true" ]]; then
                docker logs -f ${DOCKER_NAME}
                exit
            else
                DOCKER_OPTS=""
            fi
        elif [[ "$1" == "stop" ]]; then
            docker stop ${DOCKER_NAME}
        fi
    fi

    docker run \
        ${DOCKER_OPTS} \
        --rm \
        --name $DOCKER_NAME \
        --volume /usr/share/ca-certificates/:/etc/ssl/certs \
        --publish 4001:4001 \
        --publish 2380:2380 \
        --publish 2379:2379 \
        $DOCKER_IMAGE \
            -debug \
            -name etcdv2-0 \
            -advertise-client-urls http://${HOST_IP}:2379,http://${HOST_IP}:4001 \
            -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
            -initial-advertise-peer-urls http://${HOST_IP}:2380 \
            -listen-peer-urls http://0.0.0.0:2380 \
            -initial-cluster-token etcd-v2-cluster \
            -initial-cluster etcdv2-0=http://${HOST_IP}:2380 \
            -initial-cluster-state new
}

function etcdv3 {
    local DOCKER_IMAGE="gcr.io/etcd-development/etcd:${ETCD3_VERSION}"
    local DOCKER_NAME="etcdv3"
    local DOCKER_OPTS="--detach"
    local HOST_IP="127.0.0.1"

    if [ "$#" -eq 1 ]; then
        if [[ "$1" == "-f" ]]; then
            local state=$(docker inspect --format "{{.State.Running}}" "${DOCKER_NAME}" 2>/dev/null)
            if [[ "$state" == "true" ]]; then
                docker logs -f ${DOCKER_NAME}
                exit
            else
                DOCKER_OPTS=""
            fi
        elif [[ "$1" == "stop" ]]; then
            docker stop ${DOCKER_NAME}
        fi
    fi

    docker run \
        ${DOCKER_OPTS} \
        --net host \
        --rm \
        --name $DOCKER_NAME \
        --volume /usr/share/ca-certificates/:/etc/ssl/certs \
        --publish 4001:4001 \
        --publish 2380:2380 \
        --publish 2379:2379 \
        $DOCKER_IMAGE \
            etcd \
                -debug \
                -name etcdv3 \
                -advertise-client-urls http://${HOST_IP}:2379,http://${HOST_IP}:4001 \
                -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
                -initial-advertise-peer-urls http://${HOST_IP}:2380
}

function etcdv3-cluster {
    local DOCKER_IMAGE="gcr.io/etcd-development/etcd:${ETCD3_VERSION}"
    local DOCKER_NETWORK="etcd"

    docker network ls | grep ${DOCKER_NETWORK} 2>&1 > /dev/null
    if [ $? -ne 0 ]; then
        docker network create ${DOCKER_NETWORK}
    fi

    docker run \
        --rm \
        --detach \
        --volume /usr/share/ca-certificates/:/etc/ssl/certs:ro \
        --publish 12379:2379 \
        --name etcd1 \
        --network ${DOCKER_NETWORK} \
        ${DOCKER_IMAGE} \
            etcd \
                -name etcd1 \
                -advertise-client-urls http://localhost:4000,http://etcd1:2379 \
                -listen-client-urls http://0.0.0.0:2379 \
                -initial-advertise-peer-urls http://etcd1:2380 \
                -listen-peer-urls http://0.0.0.0:2380 \
                -initial-cluster-token etcd-cluster \
                -initial-cluster etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380 \
                -initial-cluster-state new

    docker run \
        --rm \
        --detach \
        --volume /usr/share/ca-certificates/:/etc/ssl/certs:ro \
        --publish 22379:2379 \
        --name etcd2 \
        --network ${DOCKER_NETWORK} \
        ${DOCKER_IMAGE} \
            etcd \
                -name etcd2 \
                -advertise-client-urls http://localhost:4001,http://etcd2:2379 \
                -listen-client-urls http://0.0.0.0:2379 \
                -initial-advertise-peer-urls http://etcd2:2380 \
                -listen-peer-urls http://0.0.0.0:2380 \
                -initial-cluster-token etcd-cluster \
                -initial-cluster etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380 \
                -initial-cluster-state new

    docker run \
        --rm \
        --detach \
        --volume /usr/share/ca-certificates/:/etc/ssl/certs:ro \
        --publish 32379:2379 \
        --name etcd3 \
        --network ${DOCKER_NETWORK} \
        ${DOCKER_IMAGE} \
            etcd \
                -name etcd3 \
                -advertise-client-urls http://localhost:4002,http://etcd3:2379 \
                -listen-client-urls http://0.0.0.0:2379 \
                -initial-advertise-peer-urls http://etcd3:2380 \
                -listen-peer-urls http://0.0.0.0:2380 \
                -initial-cluster-token etcd-cluster \
                -initial-cluster etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380 \
                -initial-cluster-state new

    docker run \
        --rm \
        --detach \
        --volume /usr/share/ca-certificates/:/etc/ssl/certs:ro \
        --publish 2379:2379 \
        --name etcd-proxy \
        --network ${DOCKER_NETWORK} \
        ${DOCKER_IMAGE} \
            etcd \
                grpc-proxy \
                start \
                --endpoints=etcd1:2379,etcd2:2379,etcd3:2379 \
                --listen-addr=0.0.0.0:2379
}

function etcdctlv3-cluster {
    local DOCKER_IMAGE="gcr.io/etcd-development/etcd:${ETCD3_VERSION}"
    local DOCKER_NETWORK="etcd"

    docker network ls | grep ${DOCKER_NETWORK} 2>&1 > /dev/null
    if [ $? -ne 0 ]; then
        docker network create ${DOCKER_NETWORK}
    fi

    docker run \
        --rm \
        --tty=true \
        --interactive=true \
        --volume /usr/share/ca-certificates/:/etc/ssl/certs:ro \
        --env ETCDCTL_API=3 \
        --network ${DOCKER_NETWORK} \
        ${DOCKER_IMAGE} \
            etcdctl \
                --endpoints=etcd0:2379,etcd1:2379,etcd2:2379 \
                "$@"
}

function nexus {
    docker run \
        --rm \
        --detach \
        --publish 8081:8081 \
        --volume /opt/data/cache/nexus:/nexus-data:Z \
        --name nexus \
        sonatype/nexus3
}

